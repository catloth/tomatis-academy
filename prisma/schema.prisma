generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id   String @id @default(uuid())
  test String
}

model User {
  id            String       @id
  name          String
  email         String       @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  banExpires    DateTime?
  banReason     String?
  banned        Boolean?
  role          String?
  courses       Course[]
  accounts      Account[]
  sessions      Session[]
  enrollment    Enrollment[]

  stripeCustomerId String? @unique

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id               String       @id @default(uuid())
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            CourseLevel  @default(Beginner)
  category         String
  smallDescription String
  slug             String       @unique
  status           CourseStatus @default(Draft)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  userId           String
  chapters         Chapter[]
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  enrollment Enrollment[]
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id           String   @id @default(uuid())
  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  chapterId    String
  position     Int
  Chapter      Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

model Enrollment {
  id String @id @default(uuid())

  amount Int
  status EnrollmentStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  Pending
  Active
  Cancelled
}
